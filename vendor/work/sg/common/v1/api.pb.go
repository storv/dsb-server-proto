// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: work/sg/common/v1/api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package work_sg_common

import (
	fmt "fmt"
	_ "github.com/bilibili/kratos/tool/protobuf/pkg/extensions/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 消息类型
type SgMessageType int32

const (
	SgMessageType_DMT_UNKNOWN SgMessageType = 0
	SgMessageType_DMT_TBD     SgMessageType = 1
	SgMessageType_DMT_TRENDS  SgMessageType = 2
)

var SgMessageType_name = map[int32]string{
	0: "DMT_UNKNOWN",
	1: "DMT_TBD",
	2: "DMT_TRENDS",
}

var SgMessageType_value = map[string]int32{
	"DMT_UNKNOWN": 0,
	"DMT_TBD":     1,
	"DMT_TRENDS":  2,
}

func (x SgMessageType) String() string {
	return proto.EnumName(SgMessageType_name, int32(x))
}

func (SgMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_94955c5bcc4b00ce, []int{0}
}

// 消息定义
type SgMessage struct {
	// 消息类别
	Dmt SgMessageType `protobuf:"varint,1,opt,name=dmt,proto3,enum=work.sg.common.v1.SgMessageType" json:"dmt,omitempty"`
	// 自定义的消息体
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// 创建时间
	CreateAt int64 `protobuf:"varint,3,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// 过期时间
	ExpireAt int64 `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	// 需要发送的时间
	SendAt               int64    `protobuf:"varint,5,opt,name=send_at,json=sendAt,proto3" json:"send_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SgMessage) Reset()         { *m = SgMessage{} }
func (m *SgMessage) String() string { return proto.CompactTextString(m) }
func (*SgMessage) ProtoMessage()    {}
func (*SgMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_94955c5bcc4b00ce, []int{0}
}
func (m *SgMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SgMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SgMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SgMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SgMessage.Merge(m, src)
}
func (m *SgMessage) XXX_Size() int {
	return m.Size()
}
func (m *SgMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SgMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SgMessage proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("work.sg.common.v1.SgMessageType", SgMessageType_name, SgMessageType_value)
	proto.RegisterType((*SgMessage)(nil), "work.sg.common.v1.SgMessage")
}

func init() { proto.RegisterFile("work/sg/common/v1/api.proto", fileDescriptor_94955c5bcc4b00ce) }

var fileDescriptor_94955c5bcc4b00ce = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd0, 0x41, 0x4b, 0xf3, 0x30,
	0x18, 0x07, 0xf0, 0x65, 0xdb, 0xbb, 0xbd, 0xcd, 0xb0, 0xd6, 0x20, 0x58, 0x36, 0x29, 0xc5, 0x53,
	0xf1, 0x90, 0xb0, 0x79, 0xf6, 0xd0, 0x51, 0x4f, 0xb2, 0x0a, 0x5d, 0x45, 0xf0, 0x32, 0xe2, 0x1a,
	0x42, 0xd1, 0x36, 0xa5, 0x09, 0x53, 0xbf, 0x90, 0x9f, 0x65, 0x47, 0x3f, 0x82, 0xf6, 0x93, 0x48,
	0x12, 0x10, 0x86, 0xb7, 0xe7, 0xf9, 0xff, 0xfe, 0xe5, 0xa1, 0x81, 0xb3, 0x57, 0xd1, 0x3e, 0x13,
	0xc9, 0xc9, 0x56, 0x54, 0x95, 0xa8, 0xc9, 0x6e, 0x4e, 0x68, 0x53, 0xe2, 0xa6, 0x15, 0x4a, 0xa0,
	0x13, 0x8d, 0x58, 0x72, 0x6c, 0x11, 0xef, 0xe6, 0xd3, 0x53, 0x2e, 0xb8, 0x30, 0x4a, 0xf4, 0x64,
	0x8b, 0xd3, 0x73, 0x2e, 0x04, 0x7f, 0x61, 0xfa, 0x53, 0x42, 0xeb, 0x5a, 0x28, 0xaa, 0x4a, 0x51,
	0x4b, 0xab, 0x17, 0x1f, 0x00, 0x3a, 0x6b, 0xbe, 0x62, 0x52, 0x52, 0xce, 0xd0, 0x02, 0x0e, 0x8a,
	0x4a, 0xf9, 0x20, 0x04, 0x91, 0xbb, 0x08, 0xf1, 0x9f, 0x13, 0xf8, 0xb7, 0x9a, 0xbf, 0x37, 0x2c,
	0xd3, 0x65, 0x84, 0xe0, 0xb0, 0xa0, 0x8a, 0xfa, 0xfd, 0x10, 0x44, 0x4e, 0x66, 0x66, 0x34, 0x83,
	0xce, 0xb6, 0x65, 0x54, 0xb1, 0x0d, 0x55, 0xfe, 0x20, 0x04, 0xd1, 0x20, 0xfb, 0x6f, 0x83, 0x58,
	0x69, 0x64, 0x6f, 0x4d, 0xd9, 0x1a, 0x1c, 0x5a, 0xb4, 0x41, 0xac, 0xd0, 0x19, 0x1c, 0x4b, 0x56,
	0x17, 0x9a, 0xfe, 0x19, 0x1a, 0xe9, 0x35, 0x56, 0x97, 0xd7, 0xf0, 0xe8, 0xe0, 0x38, 0x3a, 0x86,
	0x93, 0x64, 0x95, 0x6f, 0xee, 0xd3, 0xdb, 0xf4, 0xee, 0x21, 0xf5, 0x7a, 0x68, 0x02, 0xc7, 0x3a,
	0xc8, 0x97, 0x89, 0x07, 0x90, 0x0b, 0xa1, 0x59, 0xb2, 0x9b, 0x34, 0x59, 0x7b, 0xfd, 0x65, 0xb8,
	0xff, 0x0e, 0x7a, 0xfb, 0x2e, 0x00, 0x9f, 0x5d, 0x00, 0xbe, 0xba, 0x00, 0x3c, 0xba, 0x87, 0x7f,
	0xf7, 0x34, 0x32, 0x0f, 0x72, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x1c, 0xb5, 0x71, 0x76,
	0x01, 0x00, 0x00,
}

func (m *SgMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SgMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dmt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Dmt))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.CreateAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CreateAt))
	}
	if m.ExpireAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireAt))
	}
	if m.SendAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SendAt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SgMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dmt != 0 {
		n += 1 + sovApi(uint64(m.Dmt))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CreateAt != 0 {
		n += 1 + sovApi(uint64(m.CreateAt))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovApi(uint64(m.ExpireAt))
	}
	if m.SendAt != 0 {
		n += 1 + sovApi(uint64(m.SendAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SgMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SgMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SgMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dmt", wireType)
			}
			m.Dmt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dmt |= SgMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendAt", wireType)
			}
			m.SendAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
