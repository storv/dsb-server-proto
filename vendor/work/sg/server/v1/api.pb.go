// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: work/sg/server/v1/api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package work_sg_server

import (
	context "context"
	fmt "fmt"
	_ "github.com/bilibili/kratos/tool/protobuf/pkg/extensions/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	v1 "work/sg/common/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DsbMessageReq struct {
	// 消息字节数组
	Message *v1.SgMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty" validate:"required"`
	// 用户ID
	UserIdList           []int64  `protobuf:"varint,2,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DsbMessageReq) Reset()         { *m = DsbMessageReq{} }
func (m *DsbMessageReq) String() string { return proto.CompactTextString(m) }
func (*DsbMessageReq) ProtoMessage()    {}
func (*DsbMessageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_df3e0e30dc35b6a3, []int{0}
}
func (m *DsbMessageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DsbMessageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DsbMessageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DsbMessageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DsbMessageReq.Merge(m, src)
}
func (m *DsbMessageReq) XXX_Size() int {
	return m.Size()
}
func (m *DsbMessageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DsbMessageReq.DiscardUnknown(m)
}

var xxx_messageInfo_DsbMessageReq proto.InternalMessageInfo

type DsbMessageResp struct {
	// 状态
	Status int64 `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	// 发送的终端数
	Clients              int64    `protobuf:"varint,2,opt,name=clients,proto3" json:"clients"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DsbMessageResp) Reset()         { *m = DsbMessageResp{} }
func (m *DsbMessageResp) String() string { return proto.CompactTextString(m) }
func (*DsbMessageResp) ProtoMessage()    {}
func (*DsbMessageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_df3e0e30dc35b6a3, []int{1}
}
func (m *DsbMessageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DsbMessageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DsbMessageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DsbMessageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DsbMessageResp.Merge(m, src)
}
func (m *DsbMessageResp) XXX_Size() int {
	return m.Size()
}
func (m *DsbMessageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DsbMessageResp.DiscardUnknown(m)
}

var xxx_messageInfo_DsbMessageResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DsbMessageReq)(nil), "com.sg.service.v1.DsbMessageReq")
	proto.RegisterType((*DsbMessageResp)(nil), "com.sg.service.v1.DsbMessageResp")
}

func init() { proto.RegisterFile("work/sg/server/v1/api.proto", fileDescriptor_df3e0e30dc35b6a3) }

var fileDescriptor_df3e0e30dc35b6a3 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0xfd, 0xd2, 0x42, 0x0b, 0xd3, 0xcf, 0x82, 0x51, 0x34, 0xd4, 0x92, 0xc6, 0x80, 0xd0, 0xd5,
	0x84, 0xd6, 0x9d, 0x3b, 0x4b, 0x37, 0x82, 0x45, 0x48, 0x77, 0xba, 0x28, 0x93, 0x64, 0x18, 0x06,
	0x93, 0x4c, 0x3a, 0x77, 0x1a, 0x37, 0xae, 0xfa, 0x0a, 0xbe, 0x54, 0x97, 0x82, 0xfb, 0xa2, 0xc5,
	0x55, 0x97, 0x3e, 0x81, 0xe4, 0x4f, 0x2d, 0x2e, 0x5c, 0xcd, 0x9d, 0xfb, 0x73, 0xce, 0xe1, 0x1c,
	0x74, 0xf2, 0x20, 0xe4, 0xbd, 0x03, 0xcc, 0x01, 0x2a, 0x53, 0x2a, 0x9d, 0x74, 0xe0, 0x90, 0x84,
	0xe3, 0x44, 0x0a, 0x25, 0xf4, 0x7d, 0x5f, 0x44, 0x18, 0x18, 0xce, 0x66, 0xdc, 0xa7, 0x38, 0x1d,
	0x74, 0x0e, 0x99, 0x60, 0x22, 0x9f, 0x3a, 0x59, 0x55, 0x2c, 0x76, 0xba, 0x4c, 0x08, 0x16, 0xd2,
	0xec, 0xd4, 0x21, 0x71, 0x2c, 0x14, 0x51, 0x5c, 0xc4, 0x50, 0x4e, 0xbf, 0x38, 0x7c, 0x11, 0x45,
	0x22, 0xde, 0xe1, 0xb0, 0x97, 0x1a, 0xda, 0x1b, 0x83, 0x37, 0xa1, 0x00, 0x84, 0x51, 0x97, 0xce,
	0xf5, 0x1b, 0xd4, 0x8c, 0x8a, 0x9f, 0xa1, 0x59, 0x5a, 0xbf, 0x35, 0xec, 0xe2, 0x0c, 0x20, 0x13,
	0x52, 0x00, 0xe0, 0x74, 0x80, 0xa7, 0xac, 0xbc, 0x18, 0x1d, 0x7f, 0xac, 0x7b, 0x07, 0x29, 0x09,
	0x79, 0x40, 0x14, 0xbd, 0xb0, 0x25, 0x9d, 0x2f, 0xb8, 0xa4, 0x81, 0xed, 0x56, 0x28, 0xba, 0x85,
	0xfe, 0x2f, 0x80, 0xca, 0x19, 0x0f, 0x66, 0x21, 0x07, 0x65, 0xd4, 0xac, 0x7a, 0xbf, 0xee, 0xa2,
	0xac, 0x77, 0x15, 0x5c, 0x73, 0x50, 0xf6, 0x1d, 0x6a, 0xff, 0xd4, 0x00, 0x89, 0x6e, 0xa3, 0x06,
	0x28, 0xa2, 0x16, 0x90, 0x6b, 0xa8, 0x8f, 0xd0, 0x76, 0xdd, 0x2b, 0x3b, 0x6e, 0xf9, 0xea, 0x67,
	0xa8, 0xe9, 0x87, 0x9c, 0xc6, 0x0a, 0x8c, 0x5a, 0xbe, 0xd4, 0xda, 0xae, 0x7b, 0x55, 0xcb, 0xad,
	0x8a, 0xe1, 0x23, 0x6a, 0x8c, 0xc1, 0xbb, 0x4c, 0xb8, 0x2e, 0x51, 0x6b, 0x4a, 0xe3, 0x60, 0x52,
	0xe9, 0xc2, 0xbf, 0xfc, 0xc5, 0x3b, 0x56, 0x74, 0x4e, 0xff, 0xd8, 0x80, 0xc4, 0x36, 0x97, 0x2f,
	0xef, 0x4f, 0x35, 0xc3, 0x3e, 0x72, 0x02, 0xf0, 0xa6, 0x45, 0x88, 0xf0, 0x4d, 0x32, 0xb2, 0x56,
	0x6f, 0xe6, 0xbf, 0xd5, 0xc6, 0xd4, 0x9e, 0x37, 0xa6, 0xf6, 0xba, 0x31, 0xb5, 0xdb, 0x76, 0xe5,
	0x66, 0x11, 0xb9, 0xd7, 0xc8, 0x83, 0x38, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x12, 0xa8, 0xe2,
	0x49, 0x0b, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DsbApiClient is the client API for DsbApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DsbApiClient interface {
	SendMessage(ctx context.Context, in *DsbMessageReq, opts ...grpc.CallOption) (*DsbMessageResp, error)
}

type dsbApiClient struct {
	cc *grpc.ClientConn
}

func NewDsbApiClient(cc *grpc.ClientConn) DsbApiClient {
	return &dsbApiClient{cc}
}

func (c *dsbApiClient) SendMessage(ctx context.Context, in *DsbMessageReq, opts ...grpc.CallOption) (*DsbMessageResp, error) {
	out := new(DsbMessageResp)
	err := c.cc.Invoke(ctx, "/com.sg.service.v1.DsbApi/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DsbApiServer is the server API for DsbApi service.
type DsbApiServer interface {
	SendMessage(context.Context, *DsbMessageReq) (*DsbMessageResp, error)
}

func RegisterDsbApiServer(s *grpc.Server, srv DsbApiServer) {
	s.RegisterService(&_DsbApi_serviceDesc, srv)
}

func _DsbApi_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DsbMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsbApiServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.sg.service.v1.DsbApi/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsbApiServer).SendMessage(ctx, req.(*DsbMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DsbApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.sg.service.v1.DsbApi",
	HandlerType: (*DsbApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _DsbApi_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "work/sg/server/v1/api.proto",
}

func (m *DsbMessageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DsbMessageReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.UserIdList) > 0 {
		dAtA3 := make([]byte, len(m.UserIdList)*10)
		var j2 int
		for _, num1 := range m.UserIdList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DsbMessageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DsbMessageResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.Clients != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Clients))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DsbMessageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.UserIdList) > 0 {
		l = 0
		for _, e := range m.UserIdList {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DsbMessageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Clients != 0 {
		n += 1 + sovApi(uint64(m.Clients))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DsbMessageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DsbMessageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DsbMessageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &v1.SgMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIdList = append(m.UserIdList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIdList) == 0 {
					m.UserIdList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIdList = append(m.UserIdList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIdList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DsbMessageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DsbMessageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DsbMessageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			m.Clients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clients |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
